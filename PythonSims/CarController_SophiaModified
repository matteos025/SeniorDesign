from abc import ABC, abstractmethod
import numpy as np

class Controller(ABC):
    @abstractmethod
    def get_action(self, system_state):
        """
        Controllers must produce actions
        :param system_state: state of system which controller is controlling
        :return: optimal action
        """
        pass



class PlatoonController(Controller):
    def __int__(self):
        # TODO give this equations to d

        #Calculate error from position of back to front car. Delta t needs to be defined#
        error = front_car(self) - self
        kp = 10
        ki = 0.1
        kd = 3
        PID_p = kp * error
        PID_i = ki * error * delta_t + PID_i
        PID_d = kd * (error - error_last) / delta_t

        #Prevent integral windup#
        if(PID_p < 0): PID_i = 0
        else if(PID_i > 100): PID_i = 100

        error_last = error
        return (PID_p + PID_i + PID_d)
        pass

    def get_action(self, system_state):
        """ TODO platoon action given system state"""
        pass

    def vel_calc(
            self,
            my_vel,
            back_vel,
            front_vel,
            my_acc,
            back_acc,
            front_acc):
        """ TODO dynamics function """
        return my_vel * back_vel - front_vel


class KeyBoardController(Controller):
    def __init__(self):
        self.cur_action = '0'

    def get_action(self, system_state):
        if self.cur_action == 'left':
            return (0, system_state[6] + 0.1)
        elif self.cur_action == 'right':
            return (0, system_state[6] - 0.1)
        elif self.cur_action == 'forward':
            return (system_state[4, 5]+0.1, system_state[6])
        elif self.cur_action == 'backward':
            return (system_state[4, 5]-0.1, system_state[6])
        else:
            return (np.array([0,0]), system_state[6])
 124  PythonSims/Vehicle.py
@@ -1,16 +1,53 @@
import numpy as np
import numpy.linalg as npl
from abc import ABC, abstractmethod

class Vehicle(ABC):
    # @abstractmethod
    # @property
    # def pos(self):
    #     pass

class Car(object):
    def __init__(self, controller, back_car, front_car, initial_position=np.zeros(2), initial_velocity=np.zeros(2), initial_acceleration=np.zeros(2)):
    @abstractmethod
    def propogate(self, dt):
        pass


class Car(Vehicle):
    def __init__(
            self,
            controller,
            back_car,
            front_car,
            initial_position=np.zeros(2),
            initial_velocity=np.zeros(2),
            initial_acceleration=np.zeros(2)):
        self.controller = controller
        self.pos = initial_position
        self.v = initial_velocity
        self.a = initial_acceleration
        self.steering_angle = 0
        self.back_car = back_car
        self.front_car = front_car

        # angle of the velocity of the center of mass (inertial heading)
        self.psi = 0

    @property
    def mass(self):
        """ TODO: implement in class """
        return 10

    @property
    def lr(self):
        """ distance from rear axis to center of mass"""
        return 1  # m

    @property
    def lf(self):
        """distance from center of mass to front axis"""
        return 1  # m

    @property
    def pos(self):
        return self._pos
@@ -27,6 +64,10 @@ def v(self):
    def v(self, val):
        self._v = val

    @property
    def speed(self):
        return npl.norm(self.v)

    @property
    def a(self):
        return self._a
@@ -35,6 +76,23 @@ def a(self):
    def a(self, val):
        self._a = val

    @property
    def psi(self):
        return self._psi

    @psi.setter
    def psi(self, val):
        self._psi = val

    @property
    def beta(self):
        return np.arctan2(
            self.lr *
            np.tan(
                self.steering_angle),
            self.lf +
            self.lr)

    @property
    def back_car(self):
        return self._back_car
@@ -51,19 +109,65 @@ def front_car(self):
    def front_car(self, car):
        self._front_car = car

    @property
    def steering_angle(self):
        return self._steering_angle

    @steering_angle.setter
    def steering_angle(self, val):
        self._steering_angle = val

    @property
    def d_pos(self):
        """
        :return: local derivative of position
        """
        return self.speed * \
            np.array([np.cos(self.psi + self.beta), np.sin(self.psi + self.beta)])

    @property
    def d_psi(self):
        """
        :return: return local derivative of heading
        """
        return self.speed / self.lr * np.sin(self.beta)

    @property
    def ego_state(self):
        """
        :return: return state of this car
        """
        return np.concatenate((self.pos, self.v, self.a, np.array([self.steering_angle])))

    @property
    def chain_state(self):
        """
        :return: Return the state of the local chain as a 3 x len(state) matrix
        """
        return np.array((self.back_car.state, self.ego_state, self.front_car.state))

    def propogate(self, dt = 0.1):
        """
        Propogate the car forward in time. Uses linearization of derivatives so keep dt < 0.1
        :param dt: time to propogate forward
        """
        self.pos += dt*self.d_pos
        self.psi += dt*self.d_psi
        self.v += dt*self.a

    def input_control(self):
        """
        Get an input from the controller
        """
        (self.a, self.steering_angle) = self.controller.get_action(self.ego_state)

    def calc_vel(self):
        back_vel = self._back_car.v
        back_acc = self._back_car.a
        front_vel = self._front_car.v
        front_acc = self._front_car.a
        new_vel = self._controller.vel_calc(self._v, back_vel, front_vel, self._a, back_acc, front_acc)
        new_vel = self.controller.vel_calc(
            self._v, back_vel, front_vel, self._a, back_acc, front_acc)
        self.v(new_vel)


class Controller(object):
    def __int__(self):
        pass

    # stub method to calculate the car velocity given the cars around it
    def vel_calc(self, my_vel, back_vel, front_vel, my_acc, back_acc, front_acc):
        return my_vel * back_vel - front_vel
 BIN +35.5 KB PythonSims/red_car.png
Binary file not shown.
 81  PythonSims/vehicle_visualizer.py
@@ -0,0 +1,81 @@
import pygame
from abc import ABC
import time
from PythonSims.Vehicle import Car
from PythonSims.CarController import KeyBoardController
import numpy as np

class Vehicle_Visual(ABC):
    def __init__(self, vehicle, screen):
        pygame.sprite.Sprite.__init__(self)
        self.screen = screen
        self.vehicle = vehicle
        self.width = 50
        self.length = 100
        self.originalImage =pygame.image.load(
            "red_car.png").convert_alpha()
        self.originalImage = pygame.transform.scale(
            self.originalImage, (self.length, self.width))
        self.image = self.originalImage.copy()
        self.rect = self.image.get_rect()
        self.rect.center = (0, 0)



    def update(self, dt):
        self.vehicle.propogate(dt)

    def plot(self):
        oldCenter = self.rect.center
        car_img = self.originalImage.copy()
        self.image = pygame.transform.rotate(
            car_img, (-self.vehicle.psi * 360 / (2 * np.pi)))
        self.rect = self.image.get_rect()
        self.rect.center = oldCenter
        w, h = self.image.get_size()
        self.screen.blit(
            self.image, (self.vehicle.pos[0] - w / 2, self.vehicle.pos[1] - h / 2))


if __name__ == '__main__':
    pygame.init()
    screen = pygame.display.set_mode(size = (1400, 600))
    background = pygame.Surface(screen.get_size())
    background.fill((0, 0, 0))
    dt = 0.1

    # loop til done
    done = False

    clock = pygame.time.Clock()
    controller = KeyBoardController()
    car = Car(controller, None, None)
    visualizer = Vehicle_Visual(car, screen)

    while not done:
        keys = pygame.key.get_pressed()  # checking pressed keys
        for event in pygame.event.get():
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    controller.cur_action = 'forward'
                if event.key == pygame.K_DOWN:
                    controller.cur_action = 'backward'
                if keys[pygame.K_LEFT]:
                    controller.cur_action = 'left'
                if keys[pygame.K_RIGHT]:
                    controller.cur_action = 'right'
                if keys[pygame.K_e]:
                    print("Detected e")
                    done = True

        car.input_control()
        car.propogate(dt)
        screen.fill((0,0,0))
        visualizer.plot()

        # --- Go ahead and update the screen with what we've drawn.
        pygame.display.flip()

        # --- Limit to 60 frames per second
        rate = 10
        clock.tick(rate)